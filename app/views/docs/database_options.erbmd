# <%= doc_name(:database_options) %>

Any database supported by Ruby or Rails can be used with Lambda assuming your VPC/Network allows those connections.

Our goal is to cover high level aspects on how to get started using Databases with AWS SAM & Lamby without getting into the various ways to create them. As such, these guides assume you are familiar setting up AWS Resources like RDS, Aurora, or DynamoDB. Likewise, how to [use docker-compose](https://dev.to/chavesrodolfo/mysql-with-docker-compose-5cp0) for local database services is not covered.

- [Starter Project Changes](#starter-project-changes)
- [VPC Configuration](#vpc-configuration)
- [Simple MySQL Setup](#simple-mysql-setup)
- [Rails Database Migrations](#rails-database-migrations)
- [Using Aurora Serverless](#using-aurora-serverless)
- [Using DynamoDB](#using-dynamodb)
- [Other Resources](#other-resources)

## Starter Project Changes

Our <%= doc_link(:quick_start) %> cookiecutter project uses the `--skip-active-record` when creating a new Rails project. If you are using our starter, here are the steps you need to perform to enable ActiveRecord. First, open the `config/application.rb` file and uncomment this line.

```ruby
require "active_record/railtie"
```

Add this to your `config/environments/development.rb` file.

```ruby
# Raise an error on page load if there are pending migrations.
config.active_record.migration_error = :page_load
# Highlight code that triggered database queries in logs.
config.active_record.verbose_query_logs = true
```

Add this to your `config/environments/production.rb` file.

```ruby
# Do not dump schema after migrations.
config.active_record.dump_schema_after_migration = false
```

Create the `app/models/application_record.rb` base model.

```ruby
class ApplicationRecord < ActiveRecord::Base
  self.abstract_class = true
end
```

Finally, you may need to [create a database.yml](https://github.com/rails/rails/tree/main/railties/lib/rails/generators/rails/app/templates/config/databases) file matching your target adapter in the `config` directory. We recommend you create a `DATABASE_URL` environment variable with SSM Parameter Store using our <%= doc_link :environment_and_configuration %> guide.

## VPC Configuration

Most Rails applications within AWS are deployed to a private subnet(s) within a VPC which allows you to have direct network access to your relational database. For most folks, this is [the default VPC](https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html) which means finding your subnet ids and security groups is fairly easy. Once you have those, add this [VpcConfig](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-vpcconfig.html) to your project's `template.yaml` file within the existing globals section.

```yaml
Globals:
  Function:
    VpcConfig:
      SubnetIds:
        - subnet-09792e6cd06dd59ad
        - subnet-0501f3136415021da
      SecurityGroupIds:
        - sg-07be99aff5fb14557
```

Adding it here will ensure every function within your stack has a common VPC setting. Doing this in `Globals` ensures every function, like your <%= link_to 'ActiveJob', doc_lpath(:activejob_and_lambda) %> ones, will be on the same VPC without duplication. Using a `VpcConfig` should **automatically** add the `AWSLambdaVPCAccessExecutionRole` managed policy to your Lambda's execution role. If not, you can manually add it to your [Policies](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-policies) section.

```yaml
RailsLambda:
  # ...
  Properties:
    # ..
    Policies:
      - AWSLambdaVPCAccessExecutionRole
```

## Simple MySQL Setup

Using MySQL with Lambda is super easy since we have a precompiled and statically linked `libmysqlclient` in a gem named [mysql2-lambda](https://github.com/customink/mysql2-lambda). Simply add the gem to your `Gemfile`.

```ruby
gem 'mysql2-lambda'
```

Technically the gem above is not needed with container deployment package types since you could install the needed system dependencies via yum in both your project's development and production docker files.

## Rails Database Migrations

Please see the <%= doc_link(:running_tasks) %> guide on how to use Lamby's task runner for migrations or other on-demand tasks or code.

## Using Aurora Serverless

‚ö†Ô∏è Aurora Serverless v2 is [coming soon](https://aws.amazon.com/rds/aurora/serverless/).

Is your Rails project is used infrequently with sporadic access patterns? Such applications make great candidates for Aurora Serverless v1. The [ActiveRecord Adapter for Amazon Aurora Serverless](https://github.com/customink/activerecord-aurora-serverless-adapter) is a simple ActiveRecord Mysql2 adapter extensions that allow Rails to use AWS Aurora Serverless v1 the `Aws::RDSDataService::Client` interface.

- üìö [Migrate Your Rails App from Heroku to AWS Lambda](https://technology.customink.com/blog/2020/01/03/migrate-your-rails-app-from-heroku-to-aws-lambda/)

## Using DynamoDB

In some cases Rails with DynamoDB is an excellent choice. Some might say in all cases! If this sounds right for you, I highly recommend using the [Aws::Record](https://github.com/aws/aws-sdk-ruby-record) gem which leverages the `aws-sdk-dynamodb` in a very Rails like ActiveModel way. Please [share your stories](https://github.com/customink/lamby/issues/new) with us.

## Other Resources

Databases with Lambda is a big fun topic. Here are a few links to help you learn more.

- [Mysql2 Lambda Gem](https://github.com/customink/mysql2-lambda)
- [DynamoDB with AWS Record](https://github.com/aws/aws-sdk-ruby-record)
- [Amazon RDS Proxy ‚Äì Fully Managed, Highly Available DB Proxy](https://aws.amazon.com/rds/proxy/)
- [ActiveRecord Adapter for Amazon Aurora Serverless](https://github.com/customink/activerecord-aurora-serverless-adapter)
- [Migrate Your Rails App from Heroku to AWS Lambda](https://technology.customink.com/blog/2020/01/03/migrate-your-rails-app-from-heroku-to-aws-lambda/)
- [My CDK RDS Proxy - Learning Stack](https://github.com/customink/lamby-rds-proxy/)
- [My CDK VPC - Learning Stack](https://github.com/customink/lamby-vpc)
- [Amazon Aurora Serverless MySQL 5.6 Now Supports Data API](https://aws.amazon.com/about-aws/whats-new/2019/05/amazon_aurora_serverless_mysql_5_6_now_supportsdataapi/)
- [Recent Announcements on Data API for Amazon Aurora Serverless](https://aws.amazon.com/blogs/aws/new-data-api-for-amazon-aurora-serverless/)

<%= doc_next :activejob_and_lambda %>
<%= disqus %>
