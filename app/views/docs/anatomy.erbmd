# Anatomy of a Lamby Project

Lamby can be installed within legacy Rails/Rack applications or pre-installed in a fresh new Rails application using our AWS SAM [cookiecutter project](<%= doc_lpath(:quick_start) %>). This guide outlines how Lamby works and how to integrate our files within your project.

- [How Lamby Works](#how-lamby-works)
- [Core Lamby Files](#core-lamby-files)
- [Our SAM Cookiecutter's Features](#our-sam-cookiecutters-features)
- [Installing for Legacy Applications](#installing-for-legacy-applications)
- [Inspiration](#inspiration)

## How Lamby Works

Lamby is as a Rack adapter that converts AWS Lambda integration events into native <%= link_to 'Rack Environment', 'https://github.com/rack/rack/blob/master/SPEC.rdoc#the-environment-' %> objects which are sent directly to your application. Lamby can do this when using either API Gateway REST API, API Gateway HTTP API's v1/v2 payloads, or even Application Load Balancer (ALB) integrations.

This means Lamby removes the need for any [Rack Web Server](https://github.com/rack/rack#supported-web-servers-) including WEBrick, Passenger, or Puma. It also means that Lamby can be used by any [Rack Web Application](https://github.com/rack/rack#supported-web-frameworks-) such as Sinatra, Hanami, and even Rails as long as that framework is using Rack `v2.0` or higher. For Rails, this means you need to be running `v5.0` or higher. It does all of this in a simple one line interface.

```ruby
def handler(event:, context:)
  Lamby.handler $app, event, context
end
```

## Core Lamby Files

These files are core to Lamby allowing your Rails application to work on AWS Lambda. Some are specific to AWS SAM while others are opinionated files included if you used our Cookiecutter getting started project. These mostly help with Docker.

### File - `app.rb`

The `app.rb` file is similar to Rails' `config.ru` for Rack. Commonly called your handler, this file should remain relatively simple and look something like this.

```ruby
require_relative 'config/boot'
require 'lamby'
require_relative 'config/application'
require_relative 'config/environment'

$app = Rack::Builder.new { run Rails.application }.to_app

def handler(event:, context:)
  Lamby.handler $app, event, context, rack: :http
end
```

Any code outside the `handler` method is loaded only once, which includes booting your Rails application. After that, Lamby does all the work to convert the `event` and `context` objects to Rack messages that get sent to your Rails application. The details of the [AWS Lambda Function Handler in Ruby](https://docs.aws.amazon.com/lambda/latest/dg/ruby-handler.html) should be left to Lamby, but please learn about this topic if you are interested.

### File - `template.yaml`

This YAML file at the root of your project describes your [SAM application](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html). Don't worry, we have done some heavy lifting for you. But as your application grows you may end up adding resources like S3 Buckets, DynamoDB, or IAM Policies. Please take some time to learn how SAM & CloudFormation works.

- [What Is the AWS Serverless Application Model (AWS SAM)?](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html)
- [Quick Intro & Tech Spec for SAM File](https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md)
- [What is AWS CloudFormation?](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html)

### Files - `Dockerfile`, `Dockerfile-build`, & `docker-compose.yml`

Your `Dockerfile` should use one of the AWS [provided runtimes](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-using-build.html) from their public ECR repository and typically do a simple copy of your built project and some optional cleanup. For example:

```dockerfile
FROM public.ecr.aws/lambda/ruby:2.7
ARG RAILS_ENV
ENV RAILS_ENV=$RAILS_ENV
COPY . .
RUN rm -rf log test ...
CMD ["app.handler"]
```

The `Dockerfile-build` facilitates both the local development and the build environment to prepare the copy above. This follows a typical good practice for Docker called [multi-stage](https://docs.docker.com/develop/develop-images/multistage-build/) builds. We recommend using SAM's build images (ex: `amazon/aws-sam-cli-build-image-ruby2.7`) for your development needs. Installing additional tooling like a SAM version and JavaScript for compiling assets should be done in this image. All docker compose commands leverage this image.

### Files - `bin`

Because we encourage use of the Lambda docker containers using the Docker files above, we include a host of bin scripts that make development easy for you. **All files with a leading `_` should be run in the container.** For example, `bin/server` is just a docker-compose run command to `bin/_server`. Overall, here is what you will find in our cookiecutter project.

- Normalized `bootstrap`, `setup`, and `test` scripts.
- Wrappers around `sam build`, `package`, and `deploy`.
- A `bin/run` convenience script to run any other command in the container.

## Our SAM Cookiecutter's Features

<img src="<%= image_path 'aws_sam_introduction.png' %>" style="width:100%; border-radius:5px;"/>

Our cookiecutter makes starting a Rails application so easy, you may have missed some of the interesting things we have done for you. Here is a small list.

- Docker docker docker! Using AWS SAM build container for development since it closely mirrors the production Runtime container environment. Shares your project directory, environment variables, and allows easy use of container resources like MySQL.
- Encourage good CI/CD practices with GitHub Actions. Includes a test and deploy workflow with caching for fast integration and code delivery. See the <%= doc_link(:quick_start) %> for more details.
- Simple `SECRET_KEY_BASE` and SSM Parameter Store placeholders. See <%= doc_link :environment_and_configuration %> for details.
- Compiles CSS/JS Assets with LibSass & Webpacker. See <%= doc_link :asset_host_and_precompiling %> for details.
- Creates an Amazon Elastic Container Registry (ECR) repository for you automatically in `./bin/bootstrap`.
- Serving static assets using `RAILS_SERVE_STATIC_FILES` & `config.public_file_server`.
- Sets the `RAILS_LOG_TO_STDOUT` environment variable. Also ensures that all `Logger` objects are forced to use `STDOUT`.
- Adds the [lograge](https://github.com/roidrage/lograge) gem to reduce CloudWatch data costs while easily allowing CloudWatch Insights or [Embedded Metrics](https://github.com/customink/aws-embedded-metrics-customink) to be used. These are major observability wins!

## Installing for Legacy Applications

The **most comprehensive** method to install Lamby is to perform the same steps within our getting started cookiecutter project. We break these into two steps, the first adds Lamby files, the second inserts additional code. Follow the steps and files in these scripts/directories.

- [Lambify Script](https://github.com/customink/lamby-cookiecutter/blob/master/bin/_lambify)
- [Lambiy Files](https://github.com/customink/lamby-cookiecutter/tree/master/lambify)
- [Insert Script](https://github.com/customink/lamby-cookiecutter/blob/master/bin/_inserts)
- [Insert Files](https://github.com/customink/lamby-cookiecutter/tree/master/inserts)

The above files assume the most common use case of a public facing Rails application using API Gateway's HTTP API. For...

[TODO] Add conversion docs...

Alternatively, Lamby provides a simple Rake task to install very basic starter files needed to use AWS Lambda for your application. One for each integration method.

```shell
$ ./bin/rake -r lamby lamby:install:http
$ ./bin/rake -r lamby lamby:install:rest
$ ./bin/rake -r lamby lamby:install:alb
```

This task will install `app.rb`, `template.yaml`, and starter `bin` files. Please review our cookiecutter's scripts and files above for a complete integration reference.

## Inspiration

Thanks to the projects and people below which inspired our code and implementation.

- [AWS Sinatra Example](https://github.com/aws-samples/serverless-sinatra-sample)
- [Rack Lambda Handler Pull Request](https://github.com/rack/rack/pull/1337)
- [Serverless Rack Plugin](https://github.com/logandk/serverless-rack)
- [Jets' Rack Implementation](https://github.com/tongueroo/jets/blob/master/lib/jets/controller/rack/env.rb)

<%= doc_next :bin_scripts_build_and_deploy %>
<%= disqus %>
