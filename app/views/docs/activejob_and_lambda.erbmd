# ActiveJob & Lambda

## ðŸ¥‹ Lambdakiq

Background tasks with ActiveJob on AWS Lambda is a reimagination of the problem for Rails. Instead of starting up long running process that poll for work, we instead use the event-driven architecture of AWS Lambda to our advantage using a gem named [Lambdakiq](https://github.com/customink/lambdakiq):

<a href="https://github.com/customink/lambdakiq"><img width="100%" alt="Lambdakiq - ActiveJob on SQS & Lambda" src="https://raw.githubusercontent.com/customink/lambdakiq/main/images/Lambdakiq.png"/></a>

Lambdakiq, is a drop-in replacement for [Sidekiq](https://github.com/mperham/sidekiq). It allows you to leverage AWS' managed infrastructure to the fullest extent. Gone are the days of managing pods and long polling processes. Instead AWS delivers messages directly to your Rails' job functions and scales it up and down as needed. Observability is built in using AWS CloudWatch Metrics, Dashboards, and Alarms.

## Key Features

- Distinct web & jobs Lambda functions.
- AWS fully managed polling. Event-driven.
- Maximum 12 retries. Per job configurable.
- Mirror Sidekiq's retry [backoff](https://github.com/mperham/sidekiq/wiki/Error-Handling#automatic-job-retry) timing.
- Last retry is at 11 hours 30 minutes.
- Supports ActiveJob's wait/delay. Up to 15 minutes.
- Dead messages are stored for up to 14 days.

Learn more at Lambdakiq on GitHub: https://github.com/customink/lambdakiq

## ðŸ‘Š LambdaPunch

Asynchronous background job processing for AWS Lambda with Ruby using [Lambda Extensions](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-extensions-api.html). Inspired by the [SuckerPunch](https://github.com/brandonhilkert/sucker_punch) gem but specifically tooled to work with Lambda's invoke model.

<a href="https://github.com/customink/lambda_punch"><img width="100%" alt="Async Processing Using Lambda Extensions" src="https://user-images.githubusercontent.com/2381/123561512-c23fb580-d776-11eb-9780-71d606cd8f2c.png"></a>

<%= doc_next :logging_metrics_observability %>
<%= disqus %>
